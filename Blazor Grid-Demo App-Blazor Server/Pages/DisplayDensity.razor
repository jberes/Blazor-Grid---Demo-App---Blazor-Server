@page "/display-density"
@inject Northwind.INorthwindService northwindService

<div class="row-layout display-density-container">
    <div class="column-layout group">
        <h5 class="h5">
            Display Density
        </h5>
        <div>
            <IgbDropdown Change="onDropdownChange">
                <IgbButton slot="target">Select Display Density</IgbButton>
                <IgbDropdownItem Value="Compact">Compact</IgbDropdownItem>
                <IgbDropdownItem Value="Cosy">Cosy</IgbDropdownItem>
                <IgbDropdownItem Value="Comfortable">Comfortable</IgbDropdownItem>
            </IgbDropdown>
        </div>
        <br />
        <IgbGrid @ref="Grid1" Data="northwindEmployees" PrimaryKey="EmployeeID"
                 AllowFiltering="true" FilterMode="FilterMode.ExcelStyleFilter" AutoGenerate="false" class="ig-typography grid" display-density-scope>
            <IgbColumn Field="LastName" DataType="GridColumnDataType.String" Header="lastName" Sortable="true" Selectable="false"></IgbColumn>
            <IgbColumn Field="EmployeeID" DataType="GridColumnDataType.Number" Header="employeeID" Sortable="true" Selectable="false"></IgbColumn>
            <IgbColumn Field="FirstName" DataType="GridColumnDataType.String" Header="firstName" Sortable="true" Selectable="false"></IgbColumn>
            <IgbColumn Field="Title" DataType="GridColumnDataType.String" Header="title" Sortable="true" Selectable="false"></IgbColumn>
            <IgbColumn Field="TitleOfCourtesy" DataType="GridColumnDataType.String" Header="titleOfCourtesy" Sortable="true" Selectable="false"></IgbColumn>
            <IgbColumn Field="BirthDate" DataType="GridColumnDataType.Date" Header="birthDate" Sortable="true" Selectable="false"></IgbColumn>
            <IgbColumn Field="HireDate" DataType="GridColumnDataType.Date" Header="hireDate" Sortable="true" Selectable="false"></IgbColumn>
            <IgbColumn Field="Address.Street" DataType="GridColumnDataType.String" Header="address street" Sortable="true" Selectable="false"></IgbColumn>
            <IgbColumn Field="Address.City" DataType="GridColumnDataType.String" Header="address city" Sortable="true" Selectable="false"></IgbColumn>
            <IgbColumn Field="Address.Region" DataType="GridColumnDataType.String" Header="address region" Sortable="true" Selectable="false"></IgbColumn>
            <IgbColumn Field="Address.PostalCode" DataType="GridColumnDataType.String" Header="address postalCode" Sortable="true" Selectable="false"></IgbColumn>
            <IgbColumn Field="Address.Country" DataType="GridColumnDataType.String" Header="address country" Sortable="true" Selectable="false"></IgbColumn>
            <IgbColumn Field="Address.Phone" DataType="GridColumnDataType.String" Header="address phone" Sortable="true" Selectable="false"></IgbColumn>
            <IgbColumn Field="ManagerID" DataType="GridColumnDataType.Number" Header="managerID" Sortable="true" Selectable="false"></IgbColumn>
            <IgbColumn Field="Notes" DataType="GridColumnDataType.String" Header="notes" Sortable="true" Selectable="false"></IgbColumn>
            <IgbColumn Field="AvatarUrl" DataType="GridColumnDataType.String" Header="avatarUrl" Sortable="true" Selectable="false"></IgbColumn>
        </IgbGrid>
    </div>
</div>

@code {
    private List<Northwind.EmployeesType> northwindEmployees = new();

    protected override async Task OnInitializedAsync()
    {
        northwindEmployees = await this.northwindService.GetEmployees() ?? northwindEmployees;
    }

    IgbGrid Grid1 { get; set; }


    private void onDropdownChange(IgbDropdownItemComponentEventArgs args) 
    {
        string strValue = args.Detail.Value;
        IgniteUI.Blazor.Controls.DisplayDensity dd;
        if (Enum.TryParse(strValue, out dd))
        {
            Grid1.DisplayDensity = dd;
        }


        // this is the long way to check 
        //if (args.Detail.Value == "Cosy")
        //{
        //    Grid1.DisplayDensity = IgniteUI.Blazor.Controls.DisplayDensity.Cosy;
        //}
        //else if (args.Detail.Value == "Comfortable")
        //{
        //    Grid1.DisplayDensity = IgniteUI.Blazor.Controls.DisplayDensity.Comfortable;
        //}
        //else
        //{
        //    Grid1.DisplayDensity = IgniteUI.Blazor.Controls.DisplayDensity.Compact;
        //}
    }
}
